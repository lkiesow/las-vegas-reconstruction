ABOUT
=====

This software delivers tools to build surface reconstructions from point cloud
data and a simple viewer to display the results. Additionally, the found
surfaces will be classified into predefined categories. The main aim of this
project is to deliver fast and accurate surface extraction algorithms for
robotic applications such as tele operation in unknown environments and
localization.

This software is under permanent development and runs under Linux and MacOS. A
Windows version will be made available soon.


COMPILATION
===========

The software is built using cmake. To compile create a build subdirectory.
Switch to this directory and call:

% cmake -DCMAKE_BUILD_TYPE=Release ..
% make

The binaries are compiled to the ./bin directory in the base directory.

You may simply copy this:
% mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=Release ..; make; cd ../bin 


ADVANCED OPTIONS FOR COMPILATION
================================

There are a couple of cmake options you can use for building this project.
Among these are:

- CMAKE_BUILD_TYPE=[Release|Debug]
    Release: Enables all optimization and disables debug output.
    Debug:   Enables all debug options and warnings, disables all
             optimizations.

- CMAKE_INSTALL_PREFIX=<<PATH>>
    Using this options you can set the prefix of the install directories.

- LIB_INSTALL_DIR=<<DIRNAME>>
    Set the directory name for the libraries. The default value is "lib". On
    64bit systems you might want to set this to "lib64".

- BUILD_SHARED_LIBS=[true|false]
    Enforce building of shared or static libraries. The default is to build
    static libraries in normal and debug mode and to build shared libraries in
    release mode.

Example:
This will enable all optimizations, set the install prefix to /home/pg2011/123
and enforced thu build of static libraries:

% cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/home/pg2011/123 \
    -D LIB_INSTALL_DIR=lib64 -D BUILD_SHARED_LIBS=false ..


REQUIRED LIBRARIES
==================

  + OpenGL
  + glut
  + BOOST
    - Filesystem
    - Program Option
    - System
    - Thread
  + Qt 4.6 or newer (for qviewer)
  + libQGLViewer 2.3.9 or newer (for qviewer)
  + libXi
  + libXmu
  + Optional:
    - librply [https://github.com/lkiesow/librply]
    - laslib
    - PCL >= 1.0 [http://www.pointclouds.org]
    - Nabo

You need to compile libQGLViewer with CONFIG += no_keywords to be compatible 
with Boost. If the version that comes with your Linux distrubution is not
build this way, you have to compile and install the library manually with these 
flags. The sources can be found on the project website: http://www.libqglviewer.com/

If you have not installed PCL and/or Nabo you will have less functionality. If
you have not installed librply or laslib these libraries will be comiled for
you and (normally) statically linked.


USAGE
=====

Your can experiment with the software using the provided dataset. For a simple
reconstruction call…

% ./bin/reconstruct -v 100 dat/scan.pts

…in the root directory of the project. This will create a file called
“traingle_mesh.ply” which can be displayed using the viewer application:

% ./bin/qviewer 

If you want to use the example data, call for colorizing a point cloud without
color informaion call:

% ./colorize -d 100 -c ff0000 example-data/scan-no-color.3d \
     example-data/scan-with-color.pts colored-scan.pts

For file conversion of point clouds and meshes use the convertmodel
application:

% ./convertmodel examplefile.pts examplefile.ply


For more information, build the Doxygen documentation by switching to the build
directory and calling:

% make doc
